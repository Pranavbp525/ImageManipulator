package controller.utils;import java.io.BufferedWriter;import java.io.FileWriter;import java.io.IOException;import java.util.Scanner;import java.io.FileInputStream;import model.image.Image;import model.image.ImageImpl;/** * This class contains utility methods to load an image from a PPM file and save an image to a PPM * file. */public class PPMImageUtil implements ImageUtil {  @Override  public void saveImageToFile(Image image, String imagePath) throws IOException {    BufferedWriter writer = new BufferedWriter(new FileWriter(imagePath));    writer.write("P3");    writer.newLine();    writer.write(image.getWidth() + " " + image.getHeight());    writer.newLine();    writer.write(Integer.toString(image.getMaximumPixelValue()));    writer.newLine();    for (int row = 0; row < image.getHeight(); row++) {      for (int col = 0; col < image.getWidth(); col++) {        for (int channel = 0; channel < image.getNumberOfChannels(); channel++) {          writer.write(Integer.toString(image.getPixelValue(row, col, channel)));          writer.newLine();        }      }    }    writer.close();  }  @Override  public Image getImageFromFile(String filename) throws IOException {    Scanner scanner;    scanner = new Scanner(new FileInputStream(filename));    StringBuilder builder = new StringBuilder();    while (scanner.hasNextLine()) {      String line = scanner.nextLine();      if (line.charAt(0) != '#') {        builder.append(line).append(System.lineSeparator());      }    }    scanner = new Scanner(builder.toString());    String token = scanner.next();    if (!token.equals("P3")) {      throw new IOException(Messages.INVALID_PPM_FILE);    }    try {      int width = scanner.nextInt();      int height = scanner.nextInt();      int maxValue = scanner.nextInt();      int[][][] matrix = new int[height][width][3];      for (int row = 0; row < height; row++) {        for (int col = 0; col < width; col++) {          for (int channel = 0; channel < 3; channel++) {            matrix[row][col][channel] = scanner.nextInt();          }        }      }      return new ImageImpl.ImageImplBuilder().setHeight(height).setWidth(width)              .setMaximumPixelValue(maxValue).setMatrix(matrix).build();    }    catch (Exception e) {      throw new IOException(Messages.CORRUPTED_FILE);    }  }}